class Solution {
    public long totalCost(int[] costs, int k, int candidates) {
        PriorityQueue<Integer> leftHeap = new PriorityQueue<>();
        PriorityQueue<Integer> rightHeap = new PriorityQueue<>();

        int left = 0;
        int right = costs.length - 1;
        for(int i = 0; i < candidates; i++){
            leftHeap.offer(costs[left++]);
        }
        for(int i = 0; i < candidates && left <= right; i++){
            rightHeap.offer(costs[right--]);
        }
        long cost = 0;
        for(int i = 0; i < k; i++){
            int leftans = !leftHeap.isEmpty() ? leftHeap.peek() : Integer.MAX_VALUE;
            int rightans = !rightHeap.isEmpty() ? rightHeap.peek() : Integer.MAX_VALUE;
            if(leftans <= rightans){
                cost += (long)leftHeap.poll();
                if(left <= right){
                    leftHeap.offer(costs[left++]);
                }
            }else{
                cost += rightHeap.poll();
                if(left <= right){
                    rightHeap.offer(costs[right--]);
                }
            }
        }
        return cost;
    }
}