class Solution {

    private Map<String, Map<String, Double>> buildGraph(List<List<String>> equations, double[] values){
        Map<String, Map<String,Double>> mp = new HashMap<>();
        for(int i = 0; i < equations.size(); i++){
            String source =  equations.get(i).get(0);
            String destination = equations.get(i).get(1);
            double value = values[i];
            mp.putIfAbsent(source, new HashMap<>());
            mp.putIfAbsent(destination, new HashMap<>());
            mp.get(source).put(destination, value);
            mp.get(destination).put(source, 1.0/value);
        }
        return mp;
    }
    private double evaluate(Map<String, Map<String, Double>> mp, String source, String destination, Map<String, Boolean> visited){
        if(!mp.containsKey(source) || !mp.containsKey(destination)){
            return -1.0;
        }
        if(source.equals(destination)){
            return 1.0;
        }
        visited.put(source, true);
        Map<String, Double> neighors = mp.get(source);
        for(Map.Entry<String, Double> neighor : neighors.entrySet()){
            String nextnode = neighor.getKey();
            if(!visited.containsKey(nextnode)){
                double result = evaluate(mp,nextnode, destination, visited);
                if(result != -1.0){
                    return result * neighor.getValue();
                }
            }
        }
        visited.remove(source);
        return -1.0;
    }
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        Map<String, Map<String, Double>> mp = buildGraph(equations, values);
        double[] result = new double[queries.size()];
        for(int i = 0; i < queries.size(); i++){
            String source = queries.get(i).get(0);
            String destination = queries.get(i).get(1);
            result[i] = evaluate(mp,source, destination, new HashMap<>());
        }
        return result;
    }
}