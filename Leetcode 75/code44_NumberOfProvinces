class Solution{
    private int find(int[] parent, int city){
        if(parent[city] != city){
            parent[city] = find(parent, parent[city]);
        }
        return parent[city];
    }
    private void union(int[] parent, int city1, int city2){
        int root1 = find(parent, city1);
        int root2 = find(parent, city2);
        if(root1 != root2){
            parent[root1] = root2;
        }
    }
    public int findCircleNum(int[][] isConnected) {
        int n = isConnected.length;
        int[] parent = new int[n];

        for(int i = 0; i < n; i++){
            parent[i] = i;
        }
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(isConnected[i][j] == 1){
                    union(parent, i, j);
                }
            }
        }
        int province = 0;
        for(int i = 0; i < n; i++){
            if(parent[i] == i){
                province++;
            }
        }
        return province;
    }
}